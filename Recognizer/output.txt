--------------------------------------------------
Testing sequence "const Error= $FFFF;"

Module: class TransliterationUnit
      <Type> # = (<Symbol>, <TransliterationType>)
      Atom 1  = (c, HexLetter)
      Atom 2  = (o, HexLetter)
      Atom 3  = (n, HexLetter)
      Atom 4  = (s, HexLetter)
      Atom 5  = (t, HexLetter)
      Atom 6  = ( , SignWhiteSpace)
      Atom 7  = (E, SignExponent)
      Atom 8  = (r, HexLetter)
      Atom 9  = (r, HexLetter)
      Atom 10  = (o, HexLetter)
      Atom 11  = (r, HexLetter)
      Atom 12  = (=, SignEqual)
      Atom 13  = ( , SignWhiteSpace)
      Atom 14  = ($, SignDollar)
      Atom 15  = (F, HexLetter)
      Atom 16  = (F, HexLetter)
      Atom 17  = (F, HexLetter)
      Atom 18  = (F, HexLetter)
      Atom 19  = (;, SignSemicolon)
   Output status: Unidentified

Module: class LexicalUnit
      <Type> # = (<Value>, <LexicalType>)
      Token 1 = (const, Keyword)
      Token 2 = (Error, Identifier)
      Token 3 = (=, Equal)
      Token 4 = ($FFFF, ValueHexNumber)
      Token 5 = (;, Semicolon)
   Output status: Unidentified

Module: class IdentificationUnit
      <Type> # = (<Value>, <LexicalType>)
      Token 1 = (const, KeywordConst)
      Token 2 = (Error, Identifier)
      Token 3 = (=, Equal)
      Token 4 = ($FFFF, ValueHexNumber)
      Token 5 = (;, Semicolon)
   Output status: Unidentified

Module: class SyntaxUnit
   Result: Accepted
Accepted
--------------------------------------------------
Testing sequence "const Eps=1E-3;"

Module: class TransliterationUnit
      <Type> # = (<Symbol>, <TransliterationType>)
      Atom 1  = (c, HexLetter)
      Atom 2  = (o, HexLetter)
      Atom 3  = (n, HexLetter)
      Atom 4  = (s, HexLetter)
      Atom 5  = (t, HexLetter)
      Atom 6  = ( , SignWhiteSpace)
      Atom 7  = (E, SignExponent)
      Atom 8  = (p, HexLetter)
      Atom 9  = (s, HexLetter)
      Atom 10  = (=, SignEqual)
      Atom 11  = (1, Numeric)
      Atom 12  = (E, SignExponent)
      Atom 13  = (-, SignPM)
      Atom 14  = (3, Numeric)
      Atom 15  = (;, SignSemicolon)
   Output status: Unidentified

Module: class LexicalUnit
      <Type> # = (<Value>, <LexicalType>)
      Token 1 = (const, Keyword)
      Token 2 = (Eps, Identifier)
      Token 3 = (=, Equal)
      Token 4 = (1E-3, ValueExponentNumber)
      Token 5 = (;, Semicolon)
   Output status: Unidentified

Module: class IdentificationUnit
      <Type> # = (<Value>, <LexicalType>)
      Token 1 = (const, KeywordConst)
      Token 2 = (Eps, Identifier)
      Token 3 = (=, Equal)
      Token 4 = (1E-3, ValueExponentNumber)
      Token 5 = (;, Semicolon)
   Output status: Unidentified

Module: class SyntaxUnit
   Result: Accepted
Accepted
--------------------------------------------------
Testing sequence "const OneHndNeg=-100;"

Module: class TransliterationUnit
      <Type> # = (<Symbol>, <TransliterationType>)
      Atom 1  = (c, HexLetter)
      Atom 2  = (o, HexLetter)
      Atom 3  = (n, HexLetter)
      Atom 4  = (s, HexLetter)
      Atom 5  = (t, HexLetter)
      Atom 6  = ( , SignWhiteSpace)
      Atom 7  = (O, HexLetter)
      Atom 8  = (n, HexLetter)
      Atom 9  = (e, SignExponent)
      Atom 10  = (H, HexLetter)
      Atom 11  = (n, HexLetter)
      Atom 12  = (d, HexLetter)
      Atom 13  = (N, HexLetter)
      Atom 14  = (e, SignExponent)
      Atom 15  = (g, HexLetter)
      Atom 16  = (=, SignEqual)
      Atom 17  = (-, SignPM)
      Atom 18  = (1, Numeric)
      Atom 19  = (0, Numeric)
      Atom 20  = (0, Numeric)
      Atom 21  = (;, SignSemicolon)
   Output status: Unidentified

Module: class LexicalUnit
      <Type> # = (<Value>, <LexicalType>)
      Token 1 = (const, Keyword)
      Token 2 = (OneHndNeg, Identifier)
      Token 3 = (=, Equal)
      Token 4 = (-100, ValueDecimalNumber)
      Token 5 = (;, Semicolon)
   Output status: Unidentified

Module: class IdentificationUnit
      <Type> # = (<Value>, <LexicalType>)
      Token 1 = (const, KeywordConst)
      Token 2 = (OneHndNeg, Identifier)
      Token 3 = (=, Equal)
      Token 4 = (-100, ValueDecimalNumber)
      Token 5 = (;, Semicolon)
   Output status: Unidentified

Module: class SyntaxUnit
   Result: Accepted
Accepted
--------------------------------------------------
Testing sequence "const Str='0123456789abcdefgh';"

Module: class TransliterationUnit
      <Type> # = (<Symbol>, <TransliterationType>)
      Atom 1  = (c, HexLetter)
      Atom 2  = (o, HexLetter)
      Atom 3  = (n, HexLetter)
      Atom 4  = (s, HexLetter)
      Atom 5  = (t, HexLetter)
      Atom 6  = ( , SignWhiteSpace)
      Atom 7  = (S, HexLetter)
      Atom 8  = (t, HexLetter)
      Atom 9  = (r, HexLetter)
      Atom 10  = (=, SignEqual)
      Atom 11  = (', SignApostrophe)
      Atom 12  = (0, Numeric)
      Atom 13  = (1, Numeric)
      Atom 14  = (2, Numeric)
      Atom 15  = (3, Numeric)
      Atom 16  = (4, Numeric)
      Atom 17  = (5, Numeric)
      Atom 18  = (6, Numeric)
      Atom 19  = (7, Numeric)
      Atom 20  = (8, Numeric)
      Atom 21  = (9, Numeric)
      Atom 22  = (a, HexLetter)
      Atom 23  = (b, HexLetter)
      Atom 24  = (c, HexLetter)
      Atom 25  = (d, HexLetter)
      Atom 26  = (e, SignExponent)
      Atom 27  = (f, HexLetter)
      Atom 28  = (g, HexLetter)
      Atom 29  = (h, HexLetter)
      Atom 30  = (', SignApostrophe)
      Atom 31  = (;, SignSemicolon)
   Output status: Unidentified

Module: class LexicalUnit
      <Type> # = (<Value>, <LexicalType>)
      Token 1 = (const, Keyword)
      Token 2 = (Str, Identifier)
      Token 3 = (=, Equal)
      Token 4 = ('0123456789abcdefgh', ValueString)
      Token 5 = (;, Semicolon)
   Output status: Unidentified

Module: class IdentificationUnit
      <Type> # = (<Value>, <LexicalType>)
      Token 1 = (const, KeywordConst)
      Token 2 = (Str, Identifier)
      Token 3 = (=, Equal)
      Token 4 = ('0123456789abcdefgh', ValueString)
      Token 5 = (;, Semicolon)
   Output status: Unidentified

Module: class SyntaxUnit
   Result: Accepted
Accepted
--------------------------------------------------
Testing sequence "const Ch='b;"

Module: class TransliterationUnit
      <Type> # = (<Symbol>, <TransliterationType>)
      Atom 1  = (c, HexLetter)
      Atom 2  = (o, HexLetter)
      Atom 3  = (n, HexLetter)
      Atom 4  = (s, HexLetter)
      Atom 5  = (t, HexLetter)
      Atom 6  = ( , SignWhiteSpace)
      Atom 7  = (C, HexLetter)
      Atom 8  = (h, HexLetter)
      Atom 9  = (=, SignEqual)
      Atom 10  = (', SignApostrophe)
      Atom 11  = (b, HexLetter)
      Atom 12  = (;, SignSemicolon)
   Output status: Unidentified

Module: class LexicalUnit
      <Type> # = (<Value>, <LexicalType>)
      Token 1 = (const, Keyword)
      Token 2 = (Ch, Identifier)
      Token 3 = (=, Equal)
      Token 4 = ('b;, ValueString)
   Output status: Unidentified

Module: class IdentificationUnit
      <Type> # = (<Value>, <LexicalType>)
      Token 1 = (const, KeywordConst)
      Token 2 = (Ch, Identifier)
      Token 3 = (=, Equal)
      Token 4 = ('b;, ValueString)
   Output status: Unidentified

Module: class SyntaxUnit
   Result: Rejected
Rejected
--------------------------------------------------
Testing sequence "Str='0123456789abcdefgh';"

Module: class TransliterationUnit
      <Type> # = (<Symbol>, <TransliterationType>)
      Atom 1  = (S, HexLetter)
      Atom 2  = (t, HexLetter)
      Atom 3  = (r, HexLetter)
      Atom 4  = (=, SignEqual)
      Atom 5  = (', SignApostrophe)
      Atom 6  = (0, Numeric)
      Atom 7  = (1, Numeric)
      Atom 8  = (2, Numeric)
      Atom 9  = (3, Numeric)
      Atom 10  = (4, Numeric)
      Atom 11  = (5, Numeric)
      Atom 12  = (6, Numeric)
      Atom 13  = (7, Numeric)
      Atom 14  = (8, Numeric)
      Atom 15  = (9, Numeric)
      Atom 16  = (a, HexLetter)
      Atom 17  = (b, HexLetter)
      Atom 18  = (c, HexLetter)
      Atom 19  = (d, HexLetter)
      Atom 20  = (e, SignExponent)
      Atom 21  = (f, HexLetter)
      Atom 22  = (g, HexLetter)
      Atom 23  = (h, HexLetter)
      Atom 24  = (', SignApostrophe)
      Atom 25  = (;, SignSemicolon)
   Output status: Unidentified

Module: class LexicalUnit
      <Type> # = (<Value>, <LexicalType>)
   Output status: Rejected

Module: class IdentificationUnit
      <Type> # = (<Value>, <LexicalType>)
   Output status: Rejected

Module: class SyntaxUnit
   Result: Rejected
Rejected
--------------------------------------------------
Testing sequence "Const he = hello world;"

Module: class TransliterationUnit
      <Type> # = (<Symbol>, <TransliterationType>)
      Atom 1  = (C, HexLetter)
      Atom 2  = (o, HexLetter)
      Atom 3  = (n, HexLetter)
      Atom 4  = (s, HexLetter)
      Atom 5  = (t, HexLetter)
      Atom 6  = ( , SignWhiteSpace)
      Atom 7  = (h, HexLetter)
      Atom 8  = (e, SignExponent)
      Atom 9  = ( , SignWhiteSpace)
      Atom 10  = (=, SignEqual)
      Atom 11  = ( , SignWhiteSpace)
      Atom 12  = (h, HexLetter)
      Atom 13  = (e, SignExponent)
      Atom 14  = (l, HexLetter)
      Atom 15  = (l, HexLetter)
      Atom 16  = (o, HexLetter)
      Atom 17  = ( , SignWhiteSpace)
      Atom 18  = (w, HexLetter)
      Atom 19  = (o, HexLetter)
      Atom 20  = (r, HexLetter)
      Atom 21  = (l, HexLetter)
      Atom 22  = (d, HexLetter)
      Atom 23  = (;, SignSemicolon)
   Output status: Unidentified

Module: class LexicalUnit
      <Type> # = (<Value>, <LexicalType>)
      Token 1 = (Const, Keyword)
      Token 2 = (he, Identifier)
      Token 3 = (=, Equal)
      Token 4 = (, Keyword)
   Output status: Rejected

Module: class IdentificationUnit
      <Type> # = (<Value>, <LexicalType>)
      Token 1 = (Const, Keyword)
      Token 2 = (he, Identifier)
      Token 3 = (=, Equal)
      Token 4 = (, Keyword)
   Output status: Rejected

Module: class SyntaxUnit
   Result: Rejected
Rejected
